environment setup for development in python table of contents 1 2 3 4 5 6 7 8 9 windows subsystem for linux wsl installing conda creating the conda environment installing other dependencies installing jax vs code for development jupyter notebook other notes resettingdeleting the conda environment windows subsystem for linux wsl windows users will need to install the windows subsystem for linux which will install and underlying linux kernel that can be used by jax although it is possible to use jax on windows natively it is minimally tested and a release build of jax is not yet available so building from source is the only way to install it 1 open powershell as administrator 2 run the command below it installs wsl onto the system follow through with the instructions outputted by the command it will ask you to set up a usernamepassword wsl install 3 after installation has completed there will be a new app called ubuntu by opening the app windows connects you to the linux vm running on the machine 4 commands following this will be expected to be run in wsl unless explicitly stated otherwise 5 when referring to opening the terminal in later parts of the manual open the ubuntu app setting up conda although not necessary conda makes it easy to manage multiple installations of python and isolates these instances from the rest of the system wsl users will install conda on the linux system and use it from there 1 open the terminal 2 run the following commands in order in the newly opened terminal wget httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh chmod x miniconda3latestlinuxx86_64sh miniconda3latestlinuxx86_64sh 3 follow the instructions on screen to install miniconda 1 installing miniconda is better than installing the standard version of anaconda in this scenario as it does not provide preinstalled files which include a lot of unused packages for this project 4 run the following command to initialize conda and then close and reopen the terminal replace shellname with the shell that you are currently using this can be identified with which shell which will output the path of the shell you are using take the word after the last backslash conda init shellname 5 upon reopening the terminal there must be a base somewhere around the prompt this indicates that conda is working properly and that the base environment has been selected creating the conda environment creating the conda environment the conda environment created below will act as a container for all the packages that are going to be used make sure to activate it before running anything in the terminal regarding this project 1 run the following command to create the new environment confirm when the prompt asks you whether you want to go through with the installation conda create n wings python39 2 the environment can then be activated with the following command make sure to run it everytime you are working on this project the prompt where base appeared will have changed to wings conda activate wings 3 update the pip package manager ensure that it is the right one conda install force pip which pip3 the last command should show you a path with the miniconda environment a sample output opthomebrewcaskroommambaforgebaseenvswingsbinpip3 the baseenvswings part is the most important 4 now install the requirements found in the requirementstxt file pip3 install r requirementstxt 5 this will install all the other dependencies for the project as well as jupyter notebook installing other dependencies gpu only installing other dependencies gpu only jax relies on the cuda toolkit as well as the cudnn library the cuda toolkit is used for interacting with the nvidia gpus while the cudnn library is used for compiling functions with xla to be capable of running on the gpu 1 the nvidia cuda toolkit can be installed from the terminal via sudo apt update sudo apt install nvidiacudatoolkit if a password prompt is requested enter the password for the linux account 2 ensure that the cuda toolkit is installed by running nvcc version it should output something similar to although the version numbers will most likely be different nvcc nvidia r cuda compiler driver copyright c 20052019 nvidia corporation built on sun_jul_28_190716_pdt_2019 cuda compilation tools release 101 v101243 3 installing the cudnn library requires registering for the nvidia click download cudnn on the nvidia website create an account or login and get the deb file 4 after downloading the file install it through apt navigating to the file through the terminal can be done via cd dirname note that the windows filesystem is mounted to the linux system through mntc so entering cd mntc with navigate you to the windows system 5 you can check the list of files and folders in the current directory with ls command 6 after finding the cudnn deb file install it via the command below sudo apt install cudnnfile where cudnnfile is the filename of the deb file installing jax there are two possible choices for installation with or without gpu support gpu support is only available with an nvidia gpu however with support for amd gpus being preliminary see the issue for more details on installation and current bugs cpu only 1 run the following command below to instlal the package pip3 install jax jaxlib 2 check that the jax installation works by running the following command below python3 c import jaxprintjaxdevices you should see a cpudevice listed after the command runs running this on an m1 mac will result in a warning about minimal testing which can be safely ignored if there are any other errors contact me through canvas gpu support 1 when running on the gpu jax will automatically choose the gpu for hardware optimizations 2 run the following command below to install jax on gpu pip install upgrade jaxcuda f httpsstoragegoogleapiscomjaxreleasesjax_releaseshtml 3 run the following command to ensure that jax is working properly python3 c import jaxprintjaxdevices you should see a gpudevice or multiple gpus if your system has multiple gpus you should see a gpudevice or multiple gpus if your system has multiple gpus vs code for development visual studio code is a product provided by microsoft for development it is especially good for python due to features such as autocompletion syntax highlighting linting auto imports and support for jupyter notebooks in the editor itself 1 install and the open vs code installation can be done via the link below httpscodevisualstudiocom 2 navigate to the extensions tab and search for python install the first extension listed and open the igvortexpython folder through vs code by selecting file and open 3 open the igvortexpy file this will indicate to vs code that this is a python project 4 click on the numbers below and select the conda wings environment 5 this will automatically be used for later projects but make sure to check whenever you open vs code that the correct python environment is being used wsl users vs code allows for interfacing with the wsl environment 1 install the remote wsl extension through the extensions tab 2 vs code can then be launched through the ubuntu app by navigating to the directory you want to open in vs code and running code jupyter notebook jupyter notebook jupyter notebooks are interactive python environments that allow for code editing in an isolated environment jupyter notebook files are indicated by the ipynb file opening this file in vs code will automatically set up the notebook 1 open the sample jupyter notebook in the folder 2 select the kernel such that it shows the above kernel now you can select the button to run each box the boxes can be run in any order the environment can also be restarted by clicking the restart button or stop the current boxs execution with the interrupt button running the project 1 open vs code in the igvortexpython folder and type the command below to run the program python3 igvortexpy you can also click the run button while in the igvortexpy folder is run the file 2 the src folder contains the other functions that are similar to the matlab code it is necessary to include them in the src folder as python treats the src folder as a package and allows for imports within the project resettingdeleting the conda environment if there is an issue with the conda environment it can be reset by deleting the environment and following through with the environment setup stated previously although it is not necessary to reinstall the cuda toolkitcudnn again 1 remove the wings environment conda remove n wings all enter y to confirm